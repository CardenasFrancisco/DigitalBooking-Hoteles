stages:
  - build
  - test
  - docker-build
  - deploy

build:
  stage: build
  image: maven:3.6.3-jdk-11-slim
  script:
    - ls 
    - cd back/ProyectInt/
    - echo "Start building App"
    - mvn clean install -Dspring.profiles.active=$SPRING_ACTIVE_PROFILE && mvn package -B -e -Dspring.profiles.active=$SPRING_ACTIVE_PROFILE
  artifacts:
    expire_in: 1 hour
    paths:
      - back/ProyectInt/target/*.jar

test:
  stage: test
  needs: [build]
  image: maven:3-jdk-11-slim
  script: 
  - cd back/ProyectInt/
  - "mvn test"
  artifacts:
    paths:
      - back/ProyectInt/target/*.jar

docker-build:
  stage: docker-build
  needs: [test]
  image: docker:latest
  services: 
    - name: docker:19.03.8-dind
  before_script:
    - cd back/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE"/back .
    - docker push "$CI_REGISTRY_IMAGE"/back
    - echo "Registry image:" $CI_REGISTRY_IMAGE/back

deploy:
  stage: deploy
  needs: [docker-build]
  #image: ubuntu:latest
  image: alpine:latest
  #before_script:
  #  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  #  - eval $(ssh-agent -s)
  #  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  #  - mkdir -p ~/.ssh
  #  - chmod 700 ~/.ssh
  #  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  #  - source .${CI_COMMIT_REF_NAME}.env
  script:
    - echo "deploying app"
  #  - ssh root@$SERVER "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io; docker stop $APP_NAME; docker system prune -a -f; docker pull $DOCKER_REPO; docker container run -d --name $APP_NAME -p $PORT:8080 -e SPRING_PROFILES_ACTIVE=$SPRING_ACTIVE_PROFILE $DOCKER_REPO; docker logout"
